// backend.gs

const SHEET_NAME = "Tasks";
const HEADER_ROW = 1;

/**
 * Generates a UUID.
 * @returns {string} A new UUID.
 */
function generateUUID() {
  return Utilities.getUuid();
}

/**
 * Converts sheet data to an array of JSON objects.
 * @param {any[][]} data The 2D array from the sheet.
 * @returns {Object[]} An array of task objects.
 */
function sheetDataToJSON(data) {
  const headers = data[0];
  const jsonData = [];
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    // Skip empty rows
    if (row.join("").length === 0) continue;
    const obj = {};
    for (let j = 0; j < headers.length; j++) {
      const header = headers[j];
      obj[header] = row[j];
    }
    jsonData.push(obj);
  }
  return jsonData;
}

/**
 * Handles GET requests to fetch all tasks.
 * @param {GoogleAppsScript.Events.DoGet} e The event parameter.
 * @returns {GoogleAppsScript.Content.TextOutput} JSON response.
 */
function doGet(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error(`Sheet "${SHEET_NAME}" not found.`);
    }
    const data = sheet.getDataRange().getValues();
    const tasks = sheetDataToJSON(data);
    
    return ContentService
      .createTextOutput(JSON.stringify(tasks))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON)
      .setStatusCode(500);
  }
}

/**
 * Handles POST requests to add a new task.
 * @param {GoogleAppsScript.Events.DoPost} e The event parameter.
 * @returns {GoogleAppsScript.Content.TextOutput} JSON response.
 */
function doPost(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error(`Sheet "${SHEET_NAME}" not found.`);
    }
    
    const taskData = JSON.parse(e.postData.contents);
    
    const newTask = {
      ID: generateUUID(),
      Title: taskData.title,
      DueISO: taskData.dueISO,
      Priority: taskData.priority,
      EstPom: parseInt(taskData.estPom, 10),
      SpentPom: 0,
      Status: 'todo'
    };
    
    sheet.appendRow(Object.values(newTask));
    
    return ContentService
      .createTextOutput(JSON.stringify(newTask))
      .setMimeType(ContentService.MimeType.JSON)
      .setStatusCode(201);
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON)
      .setStatusCode(500);
  }
}

/**
 * Handles PATCH requests to increment a task's spent pomodoros.
 * @param {GoogleAppsScript.Events.DoPost} e The event parameter.
 * @returns {GoogleAppsScript.Content.TextOutput} JSON response.
 */
function doPatch(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error(`Sheet "${SHEET_NAME}" not found.`);
    }
    
    const body = JSON.parse(e.postData.contents);
    const taskId = body.taskId;
    
    if (!taskId) {
      throw new Error("taskId is required.");
    }

    const data = sheet.getDataRange().getValues();
    const idColumnIndex = data[0].indexOf("ID");
    const spentPomColumnIndex = data[0].indexOf("SpentPom");

    if (idColumnIndex === -1 || spentPomColumnIndex === -1) {
        throw new Error("Required columns (ID, SpentPom) not found in the sheet.");
    }

    let taskFound = false;
    for (let i = 1; i < data.length; i++) {
      if (data[i][idColumnIndex] === taskId) {
        const currentSpentPom = parseInt(data[i][spentPomColumnIndex], 10) || 0;
        // The range is 1-based, columns are 1-based.
        sheet.getRange(i + 1, spentPomColumnIndex + 1).setValue(currentSpentPom + 1);
        taskFound = true;
        break;
      }
    }

    if (!taskFound) {
      throw new Error(`Task with ID "${taskId}" not found.`);
    }
    
    return ContentService
      .createTextOutput(JSON.stringify({ success: true, message: "Pomodoro spent count incremented." }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    return ContentService
      .createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON)
      .setStatusCode(500);
  }
}
